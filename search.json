[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Testing shinylive extension in Quarto documents",
    "section": "",
    "text": "A basic non-interactive plot\n\nlibrary(ggplot2)\n\nggplot(faithful, aes(x = eruptions)) + geom_histogram(bins = 30)\n\n\n\n\n\n\n\n\n\n\nA Shinylive code block with a basic Shiny app\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\nA second shinylive code block with a second Shiny app\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for dataset viewer app ----\nui &lt;- fluidPage(\n\n  # App title ----\n  titlePanel(\"Shiny Text\"),\n\n  # Sidebar layout with a input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Selector for choosing dataset ----\n      selectInput(inputId = \"dataset\",\n                  label = \"Choose a dataset:\",\n                  choices = c(\"rock\", \"pressure\", \"cars\")),\n\n      # Input: Numeric entry for number of obs to view ----\n      numericInput(inputId = \"obs\",\n                   label = \"Number of observations to view:\",\n                   value = 10)\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Verbatim text for data summary ----\n      verbatimTextOutput(\"summary\"),\n\n      # Output: HTML table with requested number of observations ----\n      tableOutput(\"view\")\n\n    )\n  )\n)\n\n# Define server logic to summarize and view selected dataset ----\nserver &lt;- function(input, output) {\n\n  # Return the requested dataset ----\n  datasetInput &lt;- reactive({\n    switch(input$dataset,\n           \"rock\" = rock,\n           \"pressure\" = pressure,\n           \"cars\" = cars)\n  })\n\n  # Generate a summary of the dataset ----\n  output$summary &lt;- renderPrint({\n    dataset &lt;- datasetInput()\n    summary(dataset)\n  })\n\n  # Show the first \"n\" observations ----\n  output$view &lt;- renderTable({\n    head(datasetInput(), n = input$obs)\n  })\n\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  }
]